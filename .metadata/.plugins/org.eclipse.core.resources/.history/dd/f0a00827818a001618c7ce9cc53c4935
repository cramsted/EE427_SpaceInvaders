/*
 * Copyright (c) 2009 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * Space Invaders game
 * TODO's:
 *   - bullet collision detection / bunker degradation
 *   - aliens adjust when left column dies
 *   - automate movement and firing
 *   - adjust bottom row of aliens dying
 *   - score
 *   - implement how lives are updated
 *   - optimize drawing algorithm as needed
 *   - controls with push buttons
 *   - alien exploding
 *   - UFO appearing and exploding
 *   - tank exploding
 *   - basic refactoring/reorganizing, e.g. removing globals.c/h
 *   - CPU utilization
 */

#include "platform.h" //needed to setup the FPGA for drawing to a screen
#include "render.h"	//needed for init()
#include "controls.h"	//needed for readInput()
#include "timer.h"
#include <stdint.h>
#include "events.h"

/*
 * // Different kinds of events
#define LEFT_BTN_EVENT			0x01
#define RIGHT_BTN_EVENT			0x02
#define MIDDLE_BTN_EVENT		0x04
#define BULLET_REFRESH_EVENT	0x08
#define ALIENS_REFRESH_EVENT	0x10
#define ALIENS_FIRE_EVENT		0x20
 */

uint32_t events = 0;

int main() {
	init_platform(); // Necessary for all programs.
	init_videoDMAController(); //sets up video hardware
	videoInit();	//initializes the screen to its starting point
	timerInit();
	while(1){

		if (events) {
			// An event is pending
			if (events & LEFT_BTN_EVENT) {

			}
			if (events & RIGHT_BTN_EVENT) {

			}
		} else {
			// "Idle" event
		}
		readInput();	//waits for control input
	}
	cleanup_platform();

	return 0;
}
